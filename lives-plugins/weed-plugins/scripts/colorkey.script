<define>
|1.8.3
</define>

<name>
colorkey|colour key
</name>

<version>
1|1
</version>

<author>
salsaman
</author>

<unique_id>
0X145E8F1D3B53C256
</unique_id>

<language_code>
0xC0
</language_code>

<filter_flags>
may_thread
</filter_flags>

<palette_list>
WEED_PALETTE_RGB24, WEED_PALETTE_BGR24
</palette_list>

<in_chans>
in_channel0
in_channel1
</in_chans>

<out_chans>
out_channel0|inplace
</out_chans>

<params>
delta|_Delta|num2|.2|0.|1.|
opac|_Opacity|num2|1.|0.|1.|
col|_Colour|colRGB24|0|0|255|
</params>

<process>
double opacx, xdelta = delta * 2.;
int red, green, blue;
int col_red_min, col_green_min, col_blue_min;
int col_red_max, col_green_max, col_blue_max;

delta /= 2.;

col_red_min = col_red - (int)(col_red * delta + .5);
col_green_min = col_green - (int)(col_green * xdelta + .5);
col_blue_min = col_blue - (int)(col_blue * delta + .5);

xdelta *= 2.;
delta *= 2.;

col_red_max = col_red + (int)((255 - col_red) * delta + .5);
col_green_max = col_green + (int)((255 - col_green) * xdelta + .5);
col_blue_max = col_blue + (int)((255 - col_blue) * delta + .5);

width *= 3;

for (int i = 0; i < height; i++) {
  for (int j = 0; j < width; j += 3) {
    if (pal == WEED_PALETTE_RGB24) {
      red = src0[irow0 * i + j]; green = src0[irow0 * i + j + 1]; blue = src0[irow0 * i + j + 2];
    } else {
      blue = src0[irow0 * i + j]; green = src0[irow0 * i + j + 1]; red = src0[irow0 * i + j + 2];
    }
    if (red >= col_red_min && red <= col_red_max && green >= col_green_min && green <= col_green_max
        && blue >= col_blue_min && blue <= col_blue_max) {
      dst[orow * i + j] = src0[irow0 * i + j] * ((opacx = 1. - opac)) + src1[irow1 * i + j] * opac;
      dst[orow * i + j + 1] = src0[irow0 * i + j + 1] * (opacx) + src1[irow1 * i + j + 1] * opac;
      dst[orow * i + j + 2] = src0[irow0 * i + j + 2] * (opacx) + src1[irow1 * i + j + 2] * opac;
    } else if (!inplace) weed_memcpy(&dst[orow * i + j], &src0[irow0 * i + j], 3);
  }
}
</process>
