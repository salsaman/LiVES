<define>
|1.8.3
</define>

<name>
targeted_zoom|targeted zoom
</name>

<version>
2|1
</version>

<author>
salsaman
</author>

<unique_id>
0X666C7690A121BFE4
</unique_id>

<requires>
<math.h>
putils
</requires>

<language_code>
0xC0
</language_code>

<filter_flags>
may_thread
</filter_flags>

<palette_list>
ALL_PACKED_PALETTES
</palette_list>

<in_chans>
in_channel0
</in_chans>

<out_chans>
out_channel0
</out_chans>

<params>
scale|_Scale|num2|1.|1.|exp(3)|
xoffs|_X center|num2|.5|0.|1.|
yoffs|_Y center|num2|.5|0.|1.|
</params>

<param_window>
special|framedraw|scaledpoint|1|2|0|
special|display_val|log|0|
</param_window>

<static>
static double scmax = exp(3.);
</static>

<process>
float offsx = (float)xoffs, offsy = (float)yoffs, fscale = (float)scale, fscalex;
int dx, dy, widthx;

if (fscale > scmax) fscale = scmax;
if (fscale < 1.) fscale = 1.;

if (offsx < 0.) offsx = 0.;
if (offsx > 1.) offsx = 1.;
if (offsy < 0.) offsy = 0.;
if (offsy > 1.) offsy = 1.;

offsx *= width;
offsy *= iheight;

widthx = width * psize;
fscalex = fscale * psize;
height += offset;

src -= offset * irow;

for (int y = offset; y < height; y++) {
  dy = (int)(offsy + (float)(y - iheight / 2) / fscale + .5);
if (dy >= iheight) break;
  if (dy < 0) continue;
  for (int x = 0; x < widthx; x += psize) {
    dx = (int)(offsx + (float)(x - widthx / 2) / fscalex + .5);
    if (dx >= width) break;
    if (dx < 0) continue;
    weed_memcpy(&dst[(y - offset) * orow + x],
      &src[irow * dy + dx * psize], psize);
  }
}
</process>

<display_vals>
log|double|val <= 0.||
val = log(val) + 1.;
~
val = exp(val - 1.);
</display_vals>
