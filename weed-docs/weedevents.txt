= Technical Specification =

Weed Events 1.0 final version.

CHANGELOG
28/04/2006
Changed "owner" to "owners" for FILTER_INIT event (allow multiple
track owners for a filter)
Added optional "audio_state" leaf to FRAME event.

02/06/2006
Amended "audio_state" to "audio_seek".

22/06/2006
Remove "owners"

04/09/2006
Update audio details for FRAME events. Add "ignore" leaf for
PARAM_CHANGE events.

22/11/2006
Add optional leaves to event_list

11/12/2006
Change plantptr to voidptr (plantptr only to be used for sub-plants).
Added "weed_event_api_version" leaf to EVENT_LIST plant.
Added definitions section.

12/09/2008
Added "audio_volume_tracks" and "audio_volume_values". API unchanged
since optional.

18/03/2015
Removed "first" and "last" since these do not need to be saved to disk. Added "track_label_tracks" and "track_label_values".

29/02/2016
Added WEED_AUDIO_LITTLE_ENDIAN and WEED_AUDIO_BIG_ENDIAN symbols.

15/10/2019
Added optional "author", "title", "comments", "created_version" and "edited_version" leaves.

27/02/2020
"frames" changed from int to int64. "hint" changed to "event_type"

15/08/2020
clarify that audio "seek" position is relevant even when "velocity" is set to 0.
API updated to 123 to facilitate this change.

16/10/2020
Add optional "keep_aspect" for event_list. API version updated to 123.

26/01/2021 added "random_seed" for filter_init. API unchanged.

(C) Gabriel "Salsaman" Finch 2005 - 2021

== WEED_EVENT_API_VERSION ==
This is defined as 123 for this version of the specification. This
number will be increased for future revisions of the spec. if a
function or a symbol is changed or added.


== PLANT TYPES ==
This document describes the different 'plant types' in the weed events system, and their mandatory
and optional 'leaves'.


== PLANT TYPE EVENT_LIST ==

This an optional first "plant" in an event list, it contains metadata applied to the remeaning events.

Depending on the use of the list, the metadata and following events may be held in a list in memory
or may be serialised for offline storage / interchange, etc.


 * "type" == WEED_PLANT_EVENT_LIST

'''Mandatory leaves''':[[BR]]
 
 * "weed_event_api_version" : WEED_SEED_INT : API version of this
   spec. (currently 123)

 * "fps" : WEED_SEED_DOUBLE : framerate of timeline; all events in the
   timeline MUST be quantised to this rate. An "fps" of 0 indicates
   variable framerate.


'''Optional leaves''': [[BR]]

 * "author" : WEED_SEED_STRING : author name

 * "title" : WEED_SEED_STRING :

 * "comments" : WEED_SEED_STRING :

 * "created_version" : WEED_SEED_STRING : the application which created the event list

 * "edited_version" : WEED_SEED_STRING : the application which last edited the event list

 * "width" : WEED_SEED_INT : frame width in pixels (must be >0)

 * "height" : WEED_SEED_INT : frame height in pixels (must be >0)

 * "audio_channels" : WEED_SEED_INT : number of audio channels. 0
   to force no audio. Must be >=0   [TODO: add channel layoput

 * "audio_rate" : WEED_SEED_INT : audio rate in Hz, must be >0 if "audio_channels" > 0

 * "audio_sample_size" : WEED_SEED_INT : audio sample size in bits per
   sample (e.g. 8 or 16), must be >0 if "audio_channels" > 0

 * "audio_float" : WEED_SEED_BOOLEAN : WEED_TRUE means float audio
   WEED_FALSE, integer (if not present, then sample_size >=32 may be assumed to be float, < 32, integer)

 * "audio_signed" : WEED_SEED_BOOLEAN : WEED_TRUE means signed,
   WEED_FALSE, unsigned (may be omitted for float audio, which is always signed)

 * "audio_endian" : WEED_SEED_INT : May be WEED_AUDIO_LITTLE_ENDIAN (0) or WEED_AUDIO_BIG_ENDIAN (1)
   endian, other values are invalid (ignored if sample_size is 8)

 * "audio_volume_tracks" : WEED_SEED_INT : an array that maps "audio_volume_values" to tracks. Track
   numbers < 0 are floating (backing) audio tracks. If there are fewer
   values in "audio_volume_values" than in "audio_volume_tracks", then
   the tracks without corresponding values are assumed to be "ganged"
   to the last track with a corresponding value (i.e they are locked
   to the same value).

* "audio_volume_values" : WEED_SEED_DOUBLE : array of coarse control
  (0.0 - 1.0) volume values for tracks. Mapping to tracks is done
  through "audio_volume_tracks"
 
* "track_label_tracks" : WEED_SEED_INT : an array that maps "track_label_values" to tracks.  Track
   numbers < 0 are floating (backing) audio tracks. If a track does not have a label, it may be given a default label (e.g "Video 1")

* "track_label_values" : WEED_SEED_STRING : an array of (short) track labels. Mapping of the values to tracks is done via "track_label_tracks".

* "keep_aspect" : WEED_SEED_BOOLEAN : if set to WEED_TRUE, then when resizing component frames,
  an attempt should be made to retain the original aspect ratio (e.g by "letterboxing"),
  if set to WEED_FALSE, components should be resized without reference to the original aspect ratio.
  If absent then either method may be used at the user's discretion.
  [added in API version 123]

== PLANT TYPE EVENT ==

 * "type" == WEED_PLANT_EVENT

'''Mandatory leaves''':[[BR]]

 * "event_type"	  : WEED_SEED_INT : the event type [see
   below, Event Types]

 * "timecode"	  : WEED_SEED_INT64 : the timecode of the event

Timecode is nominally in units of 10 ^ -8 (100 millionth) of a second (WEED_TICKS_PER_SECOND)

It is recommended that timecodes be in ascending order, with the first event
(not necessarily the first frame event) with timecode 0, and that events (at least frames)
are quantised to the event_list framerate.
However, there may exist occasions when this is not possible, so it should not be assumed.


== Order of events at one timecode ==

It is strongly suggested that the order and number of events at each timecode
should be:

 * 0 or more filter init events
 * 0 or more parameter change events
 * 0 or 1 filter map events
 * 0 or more parameter change events
 * 1 FRAME event [either a blank frame or a real frame]
 * 0 or more filter deinit events
 * 0 or 1 filter map events

 * Marker events can exist anywhere in the event_list.

== EVENT TYPES ==

(N.B. prior to Event API 123, the name of this leaf was "hint". This was changed to avoid possible confusion, since the value
is not simply a hint, but changes the function of the event.
There may be some legacy applications still using the old name of the leaf,
thus if the "event_type" leaf is absent for an event, and the event_list Event API is absent or < 123,
the prescence of a "hint" leaf should be checked for)


The "event_type" is a mandatory WEED_SEED_INT leaf of every event; the defined values are:

 * WEED_EVENT_TYPE_UNDEFINED
 * WEED_EVENT_TYPE_FRAME
 * WEED_EVENT_TYPE_FILTER_INIT
 * WEED_EVENT_TYPE_FILTER_DEINIT
 * WEED_EVENT_TYPE_FILTER_MAP
 * WEED_EVENT_TYPE_PARAM_CHANGE
 * WEED_EVENT_TYPE_MARKER

Depending on the "event_type" value, additional leaves are:


=== WEED_EVENT_TYPE_UNDEFINED ===
This is not actually a true event type, but for example a function can return this as the event_type value for a NULL event.
As of API version 110.



TODO: better definition of "blank" and "ignore".



=== WEED_EVENT_TYPE_FRAME ===
A FRAME event can contain video and/or audio.

The video part of a FRAME represents a stack of clip/frame pairs. Number of elements for "clips" and "frames" MUST be equal.

Mandatory leaves for all frames:

 * "clips" : WEED_SEED_INT : array of clips (clip number >= 1)

 * "frames" : WEED_SEED_INT64 : array of frames (frame number >= 1) [frame == 0 means a blank frame at that position]
                                frame < 0 means "ignore this frame event"


Each clip / frame pair creates a "track", which is used for inputs to filter, as well as audio.


Mandatory leaves for frames with audio:

The audio part of a FRAME can be represented by an array of 4 numbers:
track_number, clip_number, seek_time, velocity. Number of elements for "audio_clips" and "audio_frames" MUST be
equal.

 * "audio_clips" : WEED_SEED_INT : array of audio clips as pairs:
		 track_number, clip_number. Track number can be used to link the
		 audio track visually and functionally with a video track (e.g. 0 =
		 linked to first video track, < 0 = "floating" audio track - i.e not linked to any video track.)

		 In addition if new values appear on the same 
		 track as a previous audio event, the previous audio should be stopped (as if velocity 0.0 were sent). 
		 Clip number is the clip number where the audio is taken from.


		 Clip
		 number <=0 means ignore the value. This is useful
		 if leaves cannot be deleted. To create an ignore event, e.g. use values
		 "-1, -1, 0., 0." for "audio_clips" and "audio_seek".



 * "audio_seeks" : WEED_SEED_DOUBLE : an array of double pairs, giving audio
		   seek times in seconds (the player should quantise
		   this to the nearest sample), followed by velocity
		   (velocity 1. == normal play, 0.5 == half speed, -1.
		   == play backwards, etc). Number of elements MUST match number of
		   elements in "audio_clips", and the elements
		   correspond in order pair-by-pair. Seek values must be >= 0. 

		   If clip number is <= 0 in "audio_clips" - ignore, the corresponding "audio_seeks" pair
		   is ignored. 

		   A velocity of "0." with clip number >0 will switch
		   audio off for that track, e.g. "-1, 1, 0., 0."
		   switches off audio on track -1.

		   The seek value may be < 0., this is to allow a
		   small adjustment to synch audio with the video
		   frame. (????)


   There is no volume or pan setting: audio samples can be mixed using a filter (see the WEED AUDIO
   extension); this may require audio rendering.

   Audio continues playing at the specified velocity until the audio
      is marked off (clip_number <= 0), or the end of the audio file is
   reached, i.e. values are sparse: only "on", "off", "seek" and "velocity" changes need to
   be recorded.

   If the seek / velocity times do not match up, the producing host may try to correct this,
   either by scaling timecodes, adjusting the velocit, seek value, or some combination.
   

Audio and video frames should be combined where possible. I.e. there
should only be one frame event at a particular timecode.

Note that audio events take place at the start of the video frame. Thus to ensure that all audio is turned off at
the end of timeline it may be necessary to add an additional blank frame; in this case the "cli" number may be set to a
negative value.


=== WEED_EVENT_TYPE_FILTER_INIT ===
    This event is used to init a filter instance.

 * "filter" : WEED_SEED_STRING :the HASHNAME of a Weed filter [See the main Weed
     spec. for a definition of the Hashname]


     The following two leaves are used to construct a FILTER_INSTANCE
     from a FILTER_INIT event [see the Weed Spec.]

 * "in_count" : WEED_SEED_INT : array describing the number (count)
     of instances of each in channel template; 0 means disabled, 1 means enabled,
     >1 can be used where repeated channels are allowed : optional if
     "filter" has no in channels, otherwise number of
     elements and order must match filter "in_channel_templates"

 * "out_count" : WEED_SEED_INT : array describing the number
     (count) of instances of each out channel template; 0 means disabled, 1 means enabled,
     >1 can be used where repeated channels are allowed : optional if
     "filter" has no out channel templates, otherwise number of
     elements and order must match filter "out_channel_templates"



 * "in_tracks" : WEED_SEED_INT : array of tracks [matches subsequent
     FRAME events to effect in_channels], starts at 0 for video : optional if
     "filter" has no in channels : [an in_track of -1 represents a
     separated audio track - see the WEED audio extension]

 * "out_tracks" : WEED_SEED_INT : array of tracks [matches subsequent
     FRAME events to effect out_channels], starts at 0 for video : optional if
     "filter" has no out channels : [an out track of -1 represents a
     separated audio track - see the WEED audio extension]

 * "event_id" : WEED_SEED_INT64 : used to refer to this filter_init by filter_map, filter_deinit and param_change events.
   Must be unique in the event_list.


Optional:

 * "random_seed" : WEED_SEED_INT64 : may be used to store a random_seed to be passed to the filter
 instance, so that it can generate a repeatable sequence of pseudo-random numbers.



=== WEED_EVENT_TYPE_FILTER_DEINIT ===
    This event deinits a filter instance.

 * "init_event" : WEED_SEED_INT64 : refers to the "event_id" of FILTER_INIT which must occur earlier in the event_list. 
 Each FILTER_INIT event must have exactly one corresponding FILTER_DEINIT.


=== WEED_EVENT_TYPE_FILTER_MAP ===
   This event type defines the order in which filters are applied to any
   subsequent FRAME events.

 * "init_events" : WEED_SEED_INT64 : an array which refers to "event_id"s of FILTER_INITs with "timecode" <= this
   event's timecode. The associated FILTER_DEINITs must have "timecode" >= this event's timecode.


=== WEED_EVENT_TYPE_PARAM_CHANGE ===
    Parameters are assumed to be smoothly interpolated from one value
    to the next. In order to implement an instantaneous change, the
    filter should either do its own interpolation, or the old value
    should be duplicated at the (quantised) timecode immediately before the instantaneous change. 

 * "init_event" : WEED_SEED_INT64 : refers to the "event_id" of a FILTER_INIT with "timecode" <= this
   event's timecode. The associated FILTER_DEINIT must have "timecode" >= this event's timecode

 * "index" : WEED_SEED_INT : 0 based index of in_parameter numbers

 * "value" : WEED_SEED_* : "value" of the in_parameter at "timecode".
 The type must be the same as the type of the in_parameter "value".
 The number of elements must be valid for the in_parameter "value".


Optional leaves


 * "ignore" : array of WEED_SEED_BOOLEAN : for interpolation of in parameters with
	      multiple elements in "value", "ignore" can be used to block "value"
	      elements which are to be ignored at that timecode (i.e
	      they are just "filler" values in the array). Thus, if
	      present, the number of elements in "ignore" should be = the number of elements in
	      "value" at the timecode (for COLOR parameters,
	      the number of elements in "value" is divided by 3
	      or 4 depending on "colorspace" - see the Weed Filter specification). A setting of WEED_TRUE indicates the
	      corresponding element in "value" should *not* be considered an
	      interpolation point (i.e. it is just a "filler"
	      element). A missing element in "ignore" is considered to be
	      WEED_FALSE. Extra elements in "ignore" are ignored.


=== WEED_EVENT_TYPE_MARKER ===

This is a host specific marker event. Leaves can vary from host to
host. Markers which are not recognised should be removed from the event_list.







Addendum:
== Serialising of event_lists ==

Event_lists may be serialised for transfer between applications. The
process is:

 * serialise the event_list plant
 * serialise the event plants in the order in which they appear in the event_list

The serialisation format of each plant shall be as follows:

(uint32_t) number_of_properties

then for each property:

(uint32_t) name_len | (char *) property_name | (uint32_t) seed_type |
(uint32_t) num_elems |
where name_len == strlen(property_name)
property_name is ASCII, not NUL-terminated
then for each element:

(uint32_t) byte_size | (void *) value
[strings are utf-8, not NUL terminated]

| is shown for clarity only and is not written to the output.
Byte order is little-endian.

Note: the "type" leaf should be serialised first, in order to assist
reconstruction of the deserialised plant.


Format shall be little endian for all types (except string).




== definitions ==
The weed-events.h header currently contains the following definitions:

#define WEED_EVENT_API_VERSION 123


Summary:

== EVENT_TYPES ==

 * WEED_EVENT_TYPE_FRAME
 * WEED_EVENT_TYPE_FILTER_INIT
 * WEED_EVENT_TYPE_FILTER_DEINIT
 * WEED_EVENT_TYPE_FILTER_MAP
 * WEED_EVENT_TYPE_PARAM_CHANGE
 * WEED_EVENT_TYPE_MARKER



== ENDIAN ==
* WEED_AUDIO_LITTLE_ENDIAN
* WEED_AUDIO_BIG_ENDIAN
